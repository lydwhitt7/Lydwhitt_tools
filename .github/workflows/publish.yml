name: Publish to PyPI (tag-driven)

on:
  push:
    tags:
      - "v*"

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write    # <-- required for Trusted Publishing (OIDC)

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build tomli-w

      - name: Clean dist
        run: rm -rf dist

      - name: Derive version from tag and write into pyproject.toml
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF_TYPE:-}" != "tag" ]]; then
            echo "This workflow must be triggered by a tag (vX.Y.Z)."
            exit 1
          fi
          TAG="${GITHUB_REF_NAME}"        # e.g., v0.1.7
          VERSION="${TAG#v}"              # -> 0.1.7

          # Basic sanity check (X.Y or X.Y.Z)
          [[ "$VERSION" =~ ^[0-9]+\.[0-9]+(\.[0-9]+)?$ ]] || { echo "Bad tag: $TAG"; exit 1; }

          python - << 'PY'
          import os, re, pathlib
          try:
              import tomllib  # 3.11+
          except ModuleNotFoundError:
              import tomli as tomllib
          import tomli_w

          tag = os.environ["GITHUB_REF_NAME"]
          version = tag.lstrip("v")
          if not re.match(r"^\d+\.\d+(\.\d+)?$", version):
              raise SystemExit(f"Bad version from tag: {version}")

          p = pathlib.Path("pyproject.toml")
          data = tomllib.loads(p.read_text(encoding="utf-8"))
          proj = data.setdefault("project", {})
          if "dynamic" in proj and "version" in proj.get("dynamic", []):
              raise SystemExit("Remove [project].dynamic=['version'] when writing [project].version directly.")
          proj["version"] = version
          p.write_text(tomli_w.dumps(data), encoding="utf-8")
          print("Set project.version =", version)
          PY

      - name: Build sdist and wheel
        run: python -m build

      # Optional: print the wheel METADATA if things fail again
      # - name: Show METADATA (debug)
      #   if: failure()
      #   run: |
      #     python - << 'PY'
      #     import glob, zipfile
      #     whl = sorted(glob.glob('dist/*.whl'))[-1]
      #     with zipfile.ZipFile(whl) as z:
      #         meta = [n for n in z.namelist() if n.endswith('METADATA')][0]
      #         print(z.read(meta).decode())
      #     PY

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1   # <-- newer action with metadata v2.4 support
        # No 'with: password' here â€” OIDC trusted publishing handles auth
