name: Publish to PyPI (tag-driven)

on:
  push:
    tags:
      - "v*"          # e.g., v0.1.3

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # optional, but good practice

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build tomli-w

      - name: Clean dist
        run: rm -rf dist

      - name: Derive version from tag and write into pyproject.toml
        shell: bash
        run: |
          set -euo pipefail

          if [[ "${GITHUB_REF_TYPE:-}" != "tag" ]]; then
            echo "This workflow must be triggered by a tag (vX.Y.Z)."
            exit 1
          fi

          TAG="${GITHUB_REF_NAME}"        # e.g., v0.1.3
          VERSION="${TAG#v}"              # -> 0.1.3

          # Basic semver-ish check: X.Y or X.Y.Z (tweak as needed)
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
            echo "Tag must be like vX.Y or vX.Y.Z (got: $TAG)"
            exit 1
          fi
          echo "Tag: $TAG  ->  Version: $VERSION"

          python - << 'PY'
          import os, sys, pathlib, re
          try:
              import tomllib  # 3.11+
          except ModuleNotFoundError:
              import tomli as tomllib
          import tomli_w

          tag = os.environ["GITHUB_REF_NAME"]          # e.g., v0.1.3
          version = tag.lstrip("v")

          if not re.match(r"^\d+\.\d+(\.\d+)?$", version):
              raise SystemExit(f"Bad version from tag: {version!r}")

          p = pathlib.Path("pyproject.toml")
          data = tomllib.loads(p.read_text(encoding="utf-8"))

          # Fail if dynamic version is set (conflicts with writing project.version)
          proj = data.setdefault("project", {})
          if "dynamic" in proj and "version" in proj.get("dynamic", []):
              raise SystemExit(
                  "pyproject.toml has [project].dynamic = ['version'] "
                  "â€” remove that if you want this workflow to write [project].version."
              )

          proj["version"] = version
          p.write_text(tomli_w.dumps(data), encoding="utf-8")
          print("Set project.version =", version)
          PY

      - name: Build sdist and wheel
        run: python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          # skip-existing: true  # uncomment if you sometimes re-run the same tag
